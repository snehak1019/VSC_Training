
minaxext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000e  000041ec  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241e  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021b8  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00004916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00004b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000102b  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00005c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00005cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	ea ef       	ldi	r30, 0xFA	; 250
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include "minmax.h"
int min_max = 1;
    
int main()
{   int ans;
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	60 97       	sbiw	r28, 0x10	; 16
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	de bf       	out	0x3e, r29	; 62
    int arr[7] = {2,3,4,5,12,56,7};
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	ec ee       	ldi	r30, 0xEC	; 236
  d0:	f1 e4       	ldi	r31, 0x41	; 65
  d2:	de 01       	movw	r26, r28
  d4:	13 96       	adiw	r26, 0x03	; 3
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x18>
    
	ans=minmax(arr);
  de:	ce 01       	movw	r24, r28
  e0:	03 96       	adiw	r24, 0x03	; 3
  e2:	0e 94 7d 00 	call	0xfa	; 0xfa <minmax>
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	9a 83       	std	Y+2, r25	; 0x02
    return 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	60 96       	adiw	r28, 0x10	; 16
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <minmax>:
 * Created: 28-02-2024 12:33:33
 *  Author: sneha
 */ 

extern int min_max;
int minmax(int arr[]){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	cd bf       	out	0x3d, r28	; 61
 106:	de bf       	out	0x3e, r29	; 62
 108:	8b 87       	std	Y+11, r24	; 0x0b
 10a:	9c 87       	std	Y+12, r25	; 0x0c
	int min,max,ans,i=0;
 10c:	1f 82       	std	Y+7, r1	; 0x07
 10e:	18 86       	std	Y+8, r1	; 0x08
	    min=arr[0];
 110:	8b 85       	ldd	r24, Y+11	; 0x0b
 112:	9c 85       	ldd	r25, Y+12	; 0x0c
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	9a 83       	std	Y+2, r25	; 0x02
	    max=arr[0];
 11e:	8b 85       	ldd	r24, Y+11	; 0x0b
 120:	9c 85       	ldd	r25, Y+12	; 0x0c
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	8b 83       	std	Y+3, r24	; 0x03
 12a:	9c 83       	std	Y+4, r25	; 0x04
		
	    for (int i=1;i<7;i++){
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	8d 83       	std	Y+5, r24	; 0x05
 132:	9e 83       	std	Y+6, r25	; 0x06
 134:	3f c0       	rjmp	.+126    	; 0x1b4 <__EEPROM_REGION_LENGTH__+0xb4>

		    if ( min > arr[i])
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	9e 81       	ldd	r25, Y+6	; 0x06
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	2b 85       	ldd	r18, Y+11	; 0x0b
 140:	3c 85       	ldd	r19, Y+12	; 0x0c
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	fc 01       	movw	r30, r24
 148:	20 81       	ld	r18, Z
 14a:	31 81       	ldd	r19, Z+1	; 0x01
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	28 17       	cp	r18, r24
 152:	39 07       	cpc	r19, r25
 154:	6c f4       	brge	.+26     	; 0x170 <__EEPROM_REGION_LENGTH__+0x70>
		    {
			    min = arr[i];
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	2b 85       	ldd	r18, Y+11	; 0x0b
 160:	3c 85       	ldd	r19, Y+12	; 0x0c
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	9a 83       	std	Y+2, r25	; 0x02
		    }
		    if ( max < arr[i])
 170:	8d 81       	ldd	r24, Y+5	; 0x05
 172:	9e 81       	ldd	r25, Y+6	; 0x06
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	2b 85       	ldd	r18, Y+11	; 0x0b
 17a:	3c 85       	ldd	r19, Y+12	; 0x0c
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	fc 01       	movw	r30, r24
 182:	20 81       	ld	r18, Z
 184:	31 81       	ldd	r19, Z+1	; 0x01
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	82 17       	cp	r24, r18
 18c:	93 07       	cpc	r25, r19
 18e:	6c f4       	brge	.+26     	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
		    {
			    max = arr[i];
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	2b 85       	ldd	r18, Y+11	; 0x0b
 19a:	3c 85       	ldd	r19, Y+12	; 0x0c
 19c:	82 0f       	add	r24, r18
 19e:	93 1f       	adc	r25, r19
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	9c 83       	std	Y+4, r25	; 0x04
int minmax(int arr[]){
	int min,max,ans,i=0;
	    min=arr[0];
	    max=arr[0];
		
	    for (int i=1;i<7;i++){
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	8d 81       	ldd	r24, Y+5	; 0x05
 1b6:	9e 81       	ldd	r25, Y+6	; 0x06
 1b8:	07 97       	sbiw	r24, 0x07	; 7
 1ba:	0c f4       	brge	.+2      	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
 1bc:	bc cf       	rjmp	.-136    	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
		    if ( max < arr[i])
		    {
			    max = arr[i];
		    }
	    }
	    ans = (min_max==1)? max:min ;
 1be:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <__EEPROM_REGION_LENGTH__+0xd0>
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__EEPROM_REGION_LENGTH__+0xd4>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	89 87       	std	Y+9, r24	; 0x09
 1d6:	9a 87       	std	Y+10, r25	; 0x0a
		return ans;
 1d8:	89 85       	ldd	r24, Y+9	; 0x09
 1da:	9a 85       	ldd	r25, Y+10	; 0x0a
 1dc:	2c 96       	adiw	r28, 0x0c	; 12
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
